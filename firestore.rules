rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Função para verificar se o usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Função para verificar se é admin
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['app_admin', 'client_admin'];
    }
    
    // Função para verificar se é warehouse admin
    function isWarehouseAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'warehouse_admin';
    }
    
    // Função para verificar se é admin ou warehouse admin
    function isAdminOrWarehouseAdmin() {
      return isAdmin() || isWarehouseAdmin();
    }
    
    // Função para verificar se é o próprio usuário
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Regras para coleção de usuários
    match /users/{userId} {
      // Leitura: usuário pode ler próprios dados, admins podem ler todos, 
      // usuários autenticados podem ler, e usuários não autenticados podem ler usuários pendentes (para complete-signup)
      allow read: if isOwner(userId) || isAdmin() || isAuthenticated() || resource.data.status == 'pending';
      
      // Lista: permite queries para usuários autenticados e para buscar usuários pendentes (complete-signup)
      allow list: if isAuthenticated() || true;
      
      // Criação: admins podem criar usuários OU usuário pode criar seu próprio documento durante ativação
      allow create: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      
      // Atualização: usuário pode atualizar próprios dados, admins podem atualizar todos, 
      // ou usuários autenticados podem ativar contas pending (para onboarding)
      allow update: if isOwner(userId) || isAdmin() || (isAuthenticated() && resource.data.status == 'pending');
      
      // Exclusão: admins podem deletar qualquer usuário, usuários podem deletar próprios documentos pending
      allow delete: if isAdmin() || (isAuthenticated() && resource.data.status == 'pending');
    }
    
    // Regras para outras coleções
    match /clients/{clientId} {
      // Leitura: admins podem ler todos, client_admin pode ler próprio cliente
      allow read: if isAdmin() || (isAuthenticated() && 
                                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.clientId == clientId);
      // Lista: admins podem listar todos
      allow list: if isAdmin();
      // Criação: admins podem criar OU usuários autenticados podem criar durante onboarding
      allow create: if isAdmin() || isAuthenticated();
      // Atualização/Exclusão: apenas admins
      allow update, delete: if isAdmin();
    }
    
    match /warehouses/{warehouseId} {
      // Leitura: admins e usuários autenticados (para visualizar produtos)
      allow read, list: if isAuthenticated();
      // Escrita: admins podem criar/editar todos, warehouse_admin pode editar próprio galpão
      allow create: if isAdmin();
      allow update: if isAdmin() || (isWarehouseAdmin() && resource.data.ownerId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    match /products/{productId} {
      // Leitura: admins e usuários autenticados (para visualizar catálogo)
      allow read, list: if isAuthenticated();
      // Escrita: admins e warehouse admins podem criar/editar produtos
      allow write: if isAdminOrWarehouseAdmin();
    }
    
    match /drivers/{driverId} {
      // Leitura: admins podem ler todos, drivers podem ler próprios dados
      allow read, list: if isAdmin() || (isAuthenticated() && 
                                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver');
      // Escrita: apenas admins podem criar/editar/deletar motoristas
      allow write: if isAdmin();
    }
    
    match /trucks/{truckId} {
      // Leitura: admins e drivers podem ler
      allow read, list: if isAdmin() || (isAuthenticated() && 
                                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver');
      // Escrita: apenas admins podem criar/editar/deletar caminhões
      allow write: if isAdmin();
    }
    
    match /notes/{noteId} {
      allow read, write: if isAdminOrWarehouseAdmin();
    }
    
    match /sales/{saleId} {
      allow read, write: if isAdmin();
    }
  }
}